kind: Job
apiVersion: batch/v1
metadata:
  name: configure-gitlab
  namespace: openshift-gitops
  annotations:
    argocd.argoproj.io/sync-wave: "5"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: resources-checker
      containers:
        - name: configure-gitlab
          image: registry.redhat.io/openshift4/ose-cli
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
            - '-c'
            - |
              # Variables
              GITLAB_URL="https://{{ .Values.gitlab.instanceName }}.{{ .Values.cluster.domain }}"
              ROOT_USER="root"
              ROOT_PASS=$(oc get secret/gitlab-gitlab-initial-root-password -n gitlab-system -o jsonpath='{.data.password}' | base64 -d)
              GITHUB_PAT="{{ .Values.github.pat }}"
              GITHUB_REPO_1="{{ .Values.github.repo1 }}"
              GITLAB_REPO_1="{{ .Values.gitlab.repo1 }}"
              GITHUB_REPO_2="{{ .Values.github.repo2 }}"
              GITLAB_REPO_2="{{ .Values.gitlab.repo2 }}"
              KEYCLOAK_APPLICATION_NAME="keycloak"
              KEYCLOAK_REDIRECT_URI="https://keycloak.{{ .Values.cluster.domain }}/realms/backstage/broker/GitlabOIDC/endpoint"
              ORGANIZATION_NAME="{{ .Values.gitlab.organizationName }}"

              # Authenticate and get GitLab access token
              echo "Authenticating with GitLab..."
              GITLAB_AUTH_RESPONSE=$(curl -s --request POST "$GITLAB_URL/oauth/token" --data "grant_type=password" --data "username=$ROOT_USER" --data "password=$ROOT_PASS")
              
              # Debug statement to print the authentication response
              echo "GitLab Authentication Response: $GITLAB_AUTH_RESPONSE"
              
              # Check if the response is valid JSON
              if echo "$GITLAB_AUTH_RESPONSE" | python3 -c "import sys, json; json.load(sys.stdin)" 2>/dev/null; then
                GITLAB_TOKEN=$(echo "$GITLAB_AUTH_RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin)['access_token'])")
              else
                echo "Invalid JSON response from GitLab authentication. Response: $GITLAB_AUTH_RESPONSE"
                exit 1
              fi

              if [ -z "$GITLAB_TOKEN" ] || [ "$GITLAB_TOKEN" == "null" ]; then
                echo "Authentication failed. Check your credentials."
                exit 1
              fi

              echo "GitLab authentication successful. Token-> $GITLAB_TOKEN"
              
              # Enable GitHub import capability
              echo "Enabling GitHub import capability..."
              curl -s --header "Authorization: Bearer $GITLAB_TOKEN" \
                --request PUT "$GITLAB_URL/api/v4/application/settings" \
                --data "import_sources[]=github" > /dev/null
              
              echo "GitHub import capability enabled."

              # Create user1
              echo "Creating user1..."
              CREATE_USER=$(curl -s --header "Authorization: Bearer $GITLAB_TOKEN" --header "Content-Type: application/json" --request POST "$GITLAB_URL/api/v4/users" --data '{"email": "user1@example.com", "username": "user1", "name": "User One", "password": "{{ .Values.gitlab.user1Password }}", "skip_confirmation": true}')
              
              echo "User1 creation response-> $CREATE_USER"
              
              USER_ID=$(echo "$CREATE_USER" | python3 -c "import sys, json; print(json.load(sys.stdin)['id'])")

              if [ -z "$USER_ID" ] || [ "$USER_ID" == "null" ]; then
                echo "Failed to create user1. Response-> $CREATE_USER"
                exit 1
              fi
              
              echo "User1 created successfully. User ID-> $USER_ID"

              # Set public email for user1
              echo "Setting public email for user1..."
              SET_PUBLIC_EMAIL=$(curl -s --header "Authorization: Bearer $GITLAB_TOKEN" --header "Content-Type: application/json" --request PUT "$GITLAB_URL/api/v4/users/$USER_ID" --data "{\"public_email\": \"user1@example.com\"}")
              
              echo "Public email set response-> $SET_PUBLIC_EMAIL"

              # Create an organization (group) in GitLab
              echo "Creating organization (group) in GitLab..."
              CREATE_GROUP=$(curl -s --header "Authorization: Bearer $GITLAB_TOKEN" --header "Content-Type: application/json" --request POST "$GITLAB_URL/api/v4/groups" --data '{"name": "'"$ORGANIZATION_NAME"'", "path": "'"$ORGANIZATION_NAME"'"}')

              GROUP_ID=$(echo "$CREATE_GROUP" | python3 -c "import sys, json; print(json.load(sys.stdin)['id'])")

              if [ -z "$GROUP_ID" ] || [ "$GROUP_ID" == "null" ]; then
                echo "Failed to create organization. Response-> $CREATE_GROUP"
                exit 1
              fi

              echo "Organization created successfully. Group ID-> $GROUP_ID"
              
              # Set public visibility for group development
              echo "Setting public visibility for the group..."
              SET_PUBLIC_VISIBILITY=$(curl -s --header "Authorization: Bearer $GITLAB_TOKEN" \
                  --header "Content-Type: application/json" \
                  --request PUT "$GITLAB_URL/api/v4/groups/$GROUP_ID" \
                  --data '{"visibility":"public"}')
                            
              echo "Group visibility set to public. Response-> $SET_PUBLIC_VISIBILITY"

              # Add user1 as an owner of the group
              echo "Adding user1 as an owner of the organization..."
              ADD_OWNER=$(curl -s --header "Authorization: Bearer $GITLAB_TOKEN" --header "Content-Type: application/json" --request POST "$GITLAB_URL/api/v4/groups/$GROUP_ID/members" --data '{"user_id": '"$USER_ID"', "access_level": 50}')

              echo "User1 added as owner of the organization. Response-> $ADD_OWNER"

              # Create a new application for keycloak integration
              
              echo "Creating a new application in GitLab..."

              SCOPES="openid api read_api profile email read_user"
              
              APPLICATION_RESPONSE=$(curl -s --request POST "$GITLAB_URL/api/v4/applications" \
                --header "Authorization: Bearer $GITLAB_TOKEN" \
                --data "name=$KEYCLOAK_APPLICATION_NAME" \
                --data "redirect_uri=$KEYCLOAK_REDIRECT_URI" \
                --data "scopes=$SCOPES" \
                --data "confidential=false")
              
              APPLICATION_ID=$(echo $APPLICATION_RESPONSE | python3 -c "import sys, json; print(json.load(sys.stdin)['id'])")
              
              # Extract the client_id and client_secret using Python
              CLIENT_ID=$(echo "$APPLICATION_RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin)['application_id'])")
              CLIENT_SECRET=$(echo "$APPLICATION_RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin)['secret'])")

              if [ -z "$APPLICATION_ID" ] || [ "$APPLICATION_ID" == "null" ]; then
                echo "Failed to create the application. Response: $APPLICATION_RESPONSE"
                exit 1
              fi
              
              echo "Application created successfully. ID: $APPLICATION_ID"
              echo "Application Client ID: $CLIENT_ID"
              echo "Application Client Secret: $CLIENT_SECRET"

              # Create an OpenShift secret to store the client_id and client_secret

              echo "Creating or updating OpenShift secret..."
              oc create secret generic gitlab-oauth-secret \
                --from-literal=client_id=$CLIENT_ID \
                --from-literal=client_secret=$CLIENT_SECRET -n openshift-gitops \
                --dry-run=client -o yaml | oc apply -f -
              
              echo "OpenShift secret created or updated successfully."

              # Include sleep, otherwise it fails sometimes due to configuration changes not applied
              sleep 60

              # Import GitHub repositories
              echo "Importing GitHub repository 1-> $GITHUB_REPO_1"
              
              # Retrieve repository details
              GITHUB_REPO_API=$(echo "$GITHUB_REPO_1" | sed -E 's|https://github.com/||' | sed -E 's|.git$||')
              REPO_DETAILS=$(curl -s "https://api.github.com/repos/$GITHUB_REPO_API")
              
              # Extract the numeric repository ID
              REPO_ID=$(echo "$REPO_DETAILS" | python3 -c "import sys, json; print(json.load(sys.stdin)['id'])")
             
              echo "Extracted Github repository ID-> $REPO_ID"
              
              IMPORT_REPO_1=$(curl -s --header "Authorization: Bearer $GITLAB_TOKEN" \
                --header "content-type: application/json" \
                --request POST "$GITLAB_URL/api/v4/import/github" \
                --data "{\"personal_access_token\": \"$GITHUB_PAT\", \"repo_id\": \"$REPO_ID\", \"target_namespace\": \"$ORGANIZATION_NAME\", \"new_name\": \"$GITLAB_REPO_1\"}")

              echo "Results of importing repo1: $IMPORT_REPO_1"

              # Retrieve the newly created repository ID
              GITLAB_REPO_ID_1=$(echo "$IMPORT_REPO_1" | python3 -c "import sys, json; print(json.load(sys.stdin)['id'])")

              # Set the visibility of the imported repository to public
              echo "Setting visibility of GitLab repository 1 to public..."
              curl -s --header "Authorization: Bearer $GITLAB_TOKEN" \
                --header "Content-Type: application/json" \
                --request PUT "$GITLAB_URL/api/v4/projects/$GITLAB_REPO_ID_1" \
                --data '{"visibility": "public"}'
              
              echo "Visibility of GitLab repository 1 set to public."

              echo "Importing GitHub repository 2-> $GITHUB_REPO_2"
              
              # Retrieve repository details
              GITHUB_REPO_API=$(echo "$GITHUB_REPO_2" | sed -E 's|https://github.com/||' | sed -E 's|.git$||')
              REPO_DETAILS=$(curl -s "https://api.github.com/repos/$GITHUB_REPO_API")
              
              # Extract the numeric repository ID
              
              REPO_ID=$(echo "$REPO_DETAILS" | python3 -c "import sys, json; print(json.load(sys.stdin)['id'])")
              
              echo "Extracted Github repository ID-> $REPO_ID"
              
              IMPORT_REPO_2=$(curl -s --header "Authorization: Bearer $GITLAB_TOKEN" \
                --header "content-type: application/json" \
                --request POST "$GITLAB_URL/api/v4/import/github" \
                --data "{\"personal_access_token\": \"$GITHUB_PAT\", \"repo_id\": \"$REPO_ID\", \"target_namespace\": \"$ORGANIZATION_NAME\", \"new_name\": \"$GITLAB_REPO_2\"}")

              echo "Results of importing repo2: $IMPORT_REPO_2"
              
              # Retrieve the newly created repository ID
              GITLAB_REPO_ID_2=$(echo "$IMPORT_REPO_2" | python3 -c "import sys, json; print(json.load(sys.stdin)['id'])")
              
              # Set the visibility of the imported repository to public
              echo "Setting visibility of GitLab repository 2 to public..."
              curl -s --header "Authorization: Bearer $GITLAB_TOKEN" \
                --header "Content-Type: application/json" \
                --request PUT "$GITLAB_URL/api/v4/projects/$GITLAB_REPO_ID_2" \
                --data '{"visibility": "public"}'
              
              echo "Visibility of GitLab repository 2 set to public."

              echo "GitHub repositories imported successfully."