kind: Job
apiVersion: batch/v1
metadata:
  name: create-secret-for-rhdh
  namespace: openshift-gitops
  annotations:
    argocd.argoproj.io/sync-wave: "5"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: resources-checker
      containers:
        - name: create-secret-for-rhdh
          image: registry.redhat.io/openshift4/ose-cli
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
            - '-c'
            - |
              ARGOCD_PASSWORD=$(oc get secret/openshift-gitops-cluster -n openshift-gitops -o jsonpath='{.data.admin\.password}' | base64 -d)
              ARGOCD_URL="https://$(oc get routes openshift-gitops-server -n openshift-gitops -o jsonpath='{.spec.host}')"
              K8S_API_URL=$(oc get infrastructure/cluster -o jsonpath='{.status.apiServerURL}')
              K8S_SERVICE_ACCOUNT_TOKEN=$(oc -n rhdh-operator get secret rhdh-sa-token -o jsonpath='{.data.token }'| base64 -d)

              # Authenticate and get GitLab access token
              ROOT_USER="root"
              ROOT_PASS=$(oc get secret/gitlab-gitlab-initial-root-password -n gitlab-system -o jsonpath='{.data.password}' | base64 -d)
              GITLAB_HOST="gitlab.{{ .Values.cluster.domain }}"
              echo "Authenticating with GitLab..."
              GITLAB_AUTH_RESPONSE=$(curl -s --request POST "https://$GITLAB_HOST/oauth/token" --data "grant_type=password" --data "username=$ROOT_USER" --data "password=$ROOT_PASS")
              GITLAB_ACCESS_TOKEN=$(echo "$GITLAB_AUTH_RESPONSE" | python3 -c "import sys, json; print(json.load(sys.stdin)['access_token'])")

              if [ -z "$GITLAB_ACCESS_TOKEN" ] || [ "$GITLAB_ACCESS_TOKEN" == "null" ]; then
                echo "Authentication failed. Check your credentials."
                exit 1
              fi

              echo "GitLab authentication successful. Token-> $GITLAB_ACCESS_TOKEN"
              
              echo "Creating GITLAB TOKEN_..."
             
              CREATE_GITLAB_TOKEN=$(curl -s --header "Authorization: Bearer $GITLAB_ACCESS_TOKEN" --request POST "https://$GITLAB_HOST/api/v4/users/1/personal_access_tokens" --data "name=rhdhtoken&scopes[]=api,read_api,read_user&expires_at=2025-12-01")

              echo "GITLAB_TOKEN-> $CREATE_GITLAB_TOKEN"

              GITLAB_TOKEN=$(echo "$CREATE_GITLAB_TOKEN" | python3 -c "import sys, json; print(json.load(sys.stdin)['token'])")

              if [ -z "$GITLAB_TOKEN" ] || [ "$GITLAB_TOKEN" == "null" ]; then
                echo "Failed to create gitlab token. Response-> $GITLAB_TOKEN"
                exit 1
              fi
              echo "GITLAB_TOKEN created successfully"
              
              cat << EOF | oc apply -f -
              apiVersion: v1
              kind: Secret
              metadata:
                name: {{ .Values.developerhub.rhdhSecretName }}
                namespace: {{ .Values.developerhub.namespaceName }}
              stringData:
                AUTH_SESSION_SECRET: "{{ .Values.auth.sessionSecret }}"
                BACKSTAGE_URL: 'https://backstage.{{ .Values.cluster.domain }}'
                HOST_ALLOW: '*.{{ .Values.cluster.domain }}'
                ARGOCD_USERNAME: "admin"
                ARGOCD_PASSWORD: "${ARGOCD_PASSWORD}"
                ARGOCD_URL: "${ARGOCD_URL}"
                KEYCLOAK_REALM: "backstage" 
                KEYCLOAK_CLIENTID: "backstage"
                KEYCLOAK_CLIENTSECRET: "my-predefined-client-secret"
                KEYCLOAK_URL: "https://keycloak.{{ .Values.cluster.domain }}/realms/backstage"
                KEYCLOAK_URL_CATALOG: "https://{{ .Values.keycloak.instanceName }}-service.{{ .Values.keycloak.namespaceName }}.svc.cluster.local:8443"
                KEYCLOAK_CALLBACK_URL: "https://keycloak.{{ .Values.cluster.domain }}/api/oidc/handler/frame"
                K8S_SERVICE_ACCOUNT_TOKEN: "${K8S_SERVICE_ACCOUNT_TOKEN}"
                K8S_API_URL: "${K8S_API_URL}"
                GITLAB_HOST: "${GITLAB_HOST}"
                GITLAB_TOKEN: "${GITLAB_TOKEN}"
              type: Opaque
              EOF
